function options = trainingOptions(varargin)
% trainingOptions    Create options struct for training pix2pix model

%
%   trainingOptions accepts the following Name-Value pairs:
%       

%
% See also: p2p.train

% Copyright 2020 The MathWorks, Inc.
    %创建一个Parser实例，允许你定义函数应该接收哪些参数，这些参数的类型、大小以及是否可选等
    parser = inputParser();
    
    parser.addParameter("ExecutionEnvironment", "auto", ...
        @(x) ismember(x, ["auto", "cpu", "gpu"]));
    %通道
    parser.addParameter("InputChannels", 1, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
    parser.addParameter("OutputChannels", 1, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
    %批次量
    parser.addParameter("MiniBatchSize", 1, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
    %数据增强
    parser.addParameter("RandXReflection", false, ...
        @(x) validateattributes(x, "logical", "scalar"));
    
    parser.addParameter("PreSize", 128, ...
        @(x) validateattributes(x, "numeric", ["positive", "integer"]));
    parser.addParameter("InputSize", 128, ...
        @(x) validateattributes(x, "numeric", ["positive", "integer"]));

    %输入和输出数据的深度范围：
    parser.addParameter("ARange", 50000, ...
        @(x) validateattributes(x, "numeric", "positive"));
    parser.addParameter("BRange", 50000, ...
        @(x) validateattributes(x, "numeric", "positive"));

    parser.addParameter("ResumeFrom", [], ...
        @(x) validateattributes(x, ["char", "string"], "scalartext"));
    parser.addParameter("GLearnRate", 0.00007, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("GBeta1", 0.5, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("GBeta2", 0.999, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("DLearnRate", 0.00007, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("DBeta1", 0.5, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("DBeta2", 0.999, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("MaxEpochs", 500, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
    parser.addParameter("CheckpointPath", "checkpoints", ...
        @(x) validateattributes(x, ["char", "string"], "scalartext"));
    parser.addParameter("DRelLearnRate", 0.5, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    parser.addParameter("Lambda", 100, ...
        @(x) validateattributes(x, "numeric", "scalar"));
    
    
    parser.addParameter("GDepth", 5, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
    parser.addParameter("DDepth", 3, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
  
    
    parser.addParameter("Verbose", true, ...
        @(x) validateattributes(x, "logical", "scalar"));
    parser.addParameter("VerboseFrequency", 2985, ...
        @(x) validateattributes(x, "numeric", ["scalar","integer","positive"]));
    parser.addParameter("Plots", "training-progress", ...
       @(x) ismember(x, ["none", "training-progress"]));
    
    parser.parse(varargin{:});
    options = parser.Results;
    
    % Convert path the char to ensure isempty checks work.
    options.CheckpointPath = convertStringsToChars(options.CheckpointPath);
end